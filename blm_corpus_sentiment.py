# -*- coding: utf-8 -*-
"""blm-corpus-sentiment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OhvYIY1o6609aR1_veZjIl24uV_1BX-E
"""

6import pandas as pd
import regex as re
file_path = '/content/blm_11k.csv'
df = pd.read_csv(file_path, delimiter='\t')

df.columns

def extract_links(text):
    return re.findall(r'(https?://\S+)', text)

df['links'] = df['content'].apply(extract_links)
all_links = [item for sublist in df['links'].dropna() for item in sublist]

all_links[1:5]

import requests

def expand_shortened_url(shortened_url):
    try:
        response = requests.head(shortened_url, allow_redirects=True)
        if response.status_code == 200:
            return response.url
        else:
            print("Failed to expand the shortened URL:", shortened_url)
            return None
    except requests.exceptions.RequestException as e:
        print("An error occurred:", e)
        return None

def get_track_info(track_id, access_token):
    headers = {
        "Authorization": f"Bearer {access_token}"
    }
    url = f"https://api.spotify.com/v1/tracks/{track_id}"
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        track_data = response.json()
        return track_data
    else:
        print("Error:", response.status_code)
        return None

def extract_valence_arousal(track_data):
    if track_data is None:
        return None
    valence = track_data.get('valence')
    arousal = track_data.get('energy')  # Arousal is represented by energy in Spotify's API
    return valence, arousal

def main():
    shortened_url = "https://t.co/Taz0wbZrPm"
    access_token = "BQCdCUWY1YBNcxnMO5z2vG6ZM1Bj42UBgppZDmp-BvWinfDAfm5Lcz6atqxPY0LJaMJi5_s5HOQBitnQo2rDypVOzLlMxj-lNYxDmEyBs8bCt0FBd8E"

    # Expand the shortened URL
    expanded_url = expand_shortened_url(shortened_url)
    if expanded_url:
        # Extract the track ID from the expanded URL
        track_id = expanded_url.split('/')[-1]
        track_data = get_track_info(track_id, access_token)
        if track_data:
            valence, arousal = extract_valence_arousal(track_data)
            print("Valence:", valence)
            print("Arousal:", arousal)
        else:
            print("Failed to fetch track data.")
    else:
        print("Failed to expand the shortened URL.")

if __name__ == "__main__":
    main()

import requests

def get_album_tracks(album_id, access_token):
    headers = {
        "Authorization": f"Bearer {access_token}"
    }
    url = f"https://api.spotify.com/v1/albums/{album_id}/tracks"
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        album_data = response.json()
        return album_data
    else:
        print("Error:", response.status_code)
        return None

def extract_track_ids(album_data):
    if album_data is None:
        return None
    track_ids = []
    for track in album_data['items']:
        track_ids.append(track['id'])
    return track_ids

def get_track_info(track_id, access_token):
    headers = {
        "Authorization": f"Bearer {access_token}"
    }
    url = f"https://api.spotify.com/v1/tracks/{track_id}"
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        track_data = response.json()
        return track_data
    else:
        print("Error:", response.status_code)
        return None

def extract_valence_arousal(track_data):
    if track_data is None:
        return None
    valence = track_data.get('valence')
    arousal = track_data.get('energy')  # Arousal is represented by energy in Spotify's API
    return valence, arousal

def main():
    album_id = https://t.co/zu2KFjXm9l  # Example album ID
    access_token = "BQCdCUWY1YBNcxnMO5z2vG6ZM1Bj42UBgppZDmp-BvWinfDAfm5Lcz6atqxPY0LJaMJi5_s5HOQBitnQo2rDypVOzLlMxj-lNYxDmEyBs8bCt0FBd8E"

    # Fetch the album tracks
    album_tracks_data = get_album_tracks(album_id, access_token)
    if album_tracks_data:
        track_ids = extract_track_ids(album_tracks_data)
        if track_ids:
            for track_id in track_ids:
                track_data = get_track_info(track_id, access_token)
                if track_data:
                    valence, arousal = extract_valence_arousal(track_data)
                    print("Track:", track_data['name'])
                    print("Valence:", valence)
                    print("Arousal:", arousal)
                else:
                    print("Failed to fetch track data.")
        else:
            print("No tracks found in the album.")
    else:
        print("Failed to fetch album data.")

if __name__ == "__main__":
    main()

