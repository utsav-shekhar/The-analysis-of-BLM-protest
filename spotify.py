# -*- coding: utf-8 -*-
"""SPOTIFY.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14FeLV2s1OhWj8cr1s1tkw-GKYNnObjm7
"""

curl -X POST "https://accounts.spotify.com/api/token" \
     -H "Content-Type: application/x-www-form-urlencoded" \
     -d "grant_type=client_credentials&client_id=6ec30d9c64ec4f39a31ba7f8ec480b45&client_secret=81e7eed644034fa99a06f5bb5f39e05a"

import requests
import re

def extract_track_id(track_link):
    match = re.search(r"/track/([a-zA-Z0-9]+)", track_link)
    if match:
        return match.group(1)
    else:
        print("Failed to extract track ID from the link.")
        return None

def get_artist_names(track_id, access_token):
    url = f"https://api.spotify.com/v1/tracks/{track_id}"
    headers = {
        "Authorization": f"Bearer {access_token}"
    }
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        track_info = response.json()
        return [artist['name'] for artist in track_info['artists']]
    else:
        print("Failed to retrieve track information. Status code:", response.status_code)
        return None

track_link = "https://open.spotify.com/track/1X6nvZzTVXIm3mu9YGGy9f?si=QBXeOJ6gTbCX4Kbb1l4HiA"

track_id = extract_track_id(track_link)
if track_id:
    print("Track ID:", track_id)
    access_token = "BQDgEgDSJRoRtC0ACIGbmBQPe2IxkLc5ry79tQR2ZX-Sk9EqNIiIPiJO7Q0a8TEbN76YDjv90TQ9Z7yadtbjoDkP2HYcX8Yd4DCOmxeEkO3yKZbqDVY"
    artist_names = get_artist_names(track_id, access_token)
    if artist_names:
        print("Artist(s):", ', '.join(artist_names))

import requests

def expand_shortened_url(shortened_url):
    try:
        response = requests.head(shortened_url, allow_redirects=True)
        if response.status_code == 200:
            return response.url
        else:
            print("Failed to expand the shortened URL. Status code:", response.status_code)
            return None
    except requests.exceptions.RequestException as e:
        print("An error occurred:", e)
        return None
shortened_url = "https://t.co/nIEazfcoql"

original_url = expand_shortened_url(shortened_url)
if original_url:
    print("Original URL:", original_url)

import re
import pandas as pd
df = pd.read_csv('/content/blm_11k.csv', delimiter='\t')
def extract_links(text):
    return re.findall(r'(https?://\S+)', text)

df['links'] = df['content'].apply(extract_links)
all_links = [item for sublist in df['links'].dropna() for item in sublist]

len(all_links)

unique_links = set(all_links)

len(unique_links)

import requests
import re

access_token = "BQBlNYG9FzDj-9skX_F8mbWLqjIQ0TXgmcnGCzp0H9kXVrqzldneLADUY7B6OP5jnjeFmug-pWI3KZpfZOdHzA84PAMBfArj1mx_aegFC4mc71vvp70"

def expand_shortened_url(shortened_url):
    try:
        response = requests.head(shortened_url, allow_redirects=True)
        if response.status_code == 200:
            return response.url
        else:
            print("Failed to expand the shortened URL:", shortened_url)
            return None
    except requests.exceptions.RequestException as e:
        print("An error occurred:", e)
        return None

def extract_artist_names_from_link(track_link):
    if "spotify.com" not in track_link:
        expanded_url = expand_shortened_url(track_link)
        if expanded_url:
            track_link = expanded_url

    track_id = extract_track_id(track_link)
    if track_id:
        artist_names = get_artist_names(track_id, access_token)
        return artist_names
    else:
        return None

for link in all_links[:1000]:
    artist_names = extract_artist_names_from_link(link)
    if artist_names:
        print("Link:", link)
        print("Artist(s):", artist_names)
        print()

import requests
import re
from collections import Counter
from tqdm import tqdm

access_token = "BQDxmFlnx8elTVt3WZj0g4_tSRPhIXe8HiKq1HI__oWVApEioR-eFf7odauOZ-yHcmT5cai2KXl3mTHr-2c2LSoyWPRNGZdWDZZwz4v04xQJUH8CycM"

def extract_track_id(track_link):
    match = re.search(r"/track/([a-zA-Z0-9]+)", track_link)
    if match:
        return match.group(1)
    else:
        return None
def get_artist_names(track_id, access_token):
    url = f"https://api.spotify.com/v1/tracks/{track_id}"
    headers = {
        "Authorization": f"Bearer {access_token}"
    }
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        track_info = response.json()
        return [artist['name'] for artist in track_info['artists']]
    else:
        return None

def expand_shortened_url(shortened_url):
    try:
        response = requests.head(shortened_url, allow_redirects=True)
        if response.status_code == 200:
            return response.url
        else:
            print("Failed to expand the shortened URL:", shortened_url)
            return None
    except requests.exceptions.RequestException as e:
        print("An error occurred:", e)
        return None

def extract_artist_names_from_link(track_link):
    # Check if the link is shortened and expand it if necessary
    if "spotify.com" not in track_link:
        expanded_url = expand_shortened_url(track_link)
        if expanded_url:
            track_link = expanded_url

    # Extract artist names from the expanded link
    track_id = extract_track_id(track_link)
    if track_id:
        artist_names = get_artist_names(track_id, access_token)
        return artist_names
    else:
        return None

# Define a dictionary to store artist names and their frequencies
artist_frequency_map = {}

# Process the links with tqdm progress bar
for link in tqdm(all_links[:11000], desc="Processing links"):
    artist_names = extract_artist_names_from_link(link)
    if artist_names:
        # Update the artist frequency map
        for artist in artist_names:
            if artist in artist_frequency_map:
                artist_frequency_map[artist] += 1
            else:
                artist_frequency_map[artist] = 1

# Write the artist frequency map to a text file
with open('artist_frequency.txt', 'w') as file:
    for artist, frequency in artist_frequency_map.items():
        file.write(f"{artist}: {frequency}\n")

import matplotlib.pyplot as plt

# Extract artist names and frequencies from the artist frequency map
artists = list(artist_frequency_map.keys())
frequencies = list(artist_frequency_map.values())

# Sort the artists and frequencies based on frequency in descending order
sorted_artists, sorted_frequencies = zip(*sorted(zip(artists, frequencies), key=lambda x: x[1], reverse=True))

# Plot the bar graph
plt.figure(figsize=(10, 6))
plt.bar(sorted_artists[:10], sorted_frequencies[:10])  # Plot only the top
plt.xlabel('Artist')
plt.ylabel('Frequency')
plt.title('Top 10 Artists by Frequency')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

with open('artistss_frequency.txt', 'w') as file:
    for artist, frequency in artist_frequency_map.items():
        file.write(f"{artist}: {frequency}\n")

for artist, frequency in artist_frequency_map.items():
    print(f"{artist}: {frequency}\n")

import requests
from tqdm import tqdm

# Your access token
access_token = "BQAMQcKBG98NRJ56VKj61FiIaoq-Sh2xMTzMVAgu598qr8Fw2LjDc5YjUdi-srtr_xTMWJsL_x7DI5t1vNKSv-pIAPMwrhMprilcDr1qpsTMuaZ9z0Y"

def get_artist_info(artist_name, access_token):
    url = f"https://api.spotify.com/v1/search"
    params = {
        "q": artist_name,
        "type": "artist",
        "limit": 1
    }
    headers = {
        "Authorization": f"Bearer {access_token}"
    }
    response = requests.get(url, params=params, headers=headers)
    if response.status_code == 200:
        artist_info = response.json()
        return artist_info.get('artists', {}).get('items', [])[0]
    else:
        print("Failed to retrieve artist information. Status code:", response.status_code)
        return None

top_10_artists = list(artist_frequency_map.keys())[:10]

for artist_name in tqdm(top_10_artists, desc="Fetching artist info"):
    artist_info = get_artist_info(artist_name, access_token)
    if artist_info:
        print("Artist Name:", artist_info.get('name'))
        print("Genres:", ', '.join(artist_info.get('genres', [])))
        print("Popularity:", artist_info.get('popularity'))
        print("="*20)

import matplotlib.pyplot as plt
from collections import Counter

# Read data from the text file
with open("/content/artist_frequency.txt", "r") as file:
    data = file.read()

# Parse the data and extract artist names and frequencies
artist_freq = {}
total_frequency = 0
for line in data.strip().split('\n'):
    artist, freq = line.split(': ')
    freq = int(freq)
    artist_freq[artist] = freq
    total_frequency += freq

# Get the top ten frequencies
top_ten = Counter(artist_freq).most_common(10)
top_ten_artists = [artist for artist, _ in top_ten]
top_ten_frequencies = [freq for _, freq in top_ten]

# Plot the bar graph
plt.figure(figsize=(10, 6))
plt.bar(top_ten_artists, top_ten_frequencies, color='skyblue')
plt.xlabel('Artist')
plt.ylabel('Frequency')
plt.title('Top Ten Artists by Frequency')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

# Calculate the sum of frequencies
sum_of_frequencies = sum(top_ten_frequencies)
print("Sum of frequencies:", sum_of_frequencies)

import requests
import re
from collections import Counter
from tqdm import tqdm

access_token = "BQDxmFlnx8elTVt3WZj0g4_tSRPhIXe8HiKq1HI__oWVApEioR-eFf7odauOZ-yHcmT5cai2KXl3mTHr-2c2LSoyWPRNGZdWDZZwz4v04xQJUH8CycM"

def extract_track_id(track_link):
    match = re.search(r"/track/([a-zA-Z0-9]+)", track_link)
    if match:
        return match.group(1)
    else:
        return None
def get_artist_names(track_id, access_token):
    url = f"https://api.spotify.com/v1/tracks/{track_id}"
    headers = {
        "Authorization": f"Bearer {access_token}"
    }
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        track_info = response.json()
        return [artist['name'] for artist in track_info['artists']]
    else:
        return None

def expand_shortened_url(shortened_url):
    try:
        response = requests.head(shortened_url, allow_redirects=True)
        if response.status_code == 200:
            return response.url
        else:
            print("Failed to expand the shortened URL:", shortened_url)
            return None
    except requests.exceptions.RequestException as e:
        print("An error occurred:", e)
        return None

def extract_artist_names_from_link(track_link):
    # Check if the link is shortened and expand it if necessary
    if "spotify.com" not in track_link:
        expanded_url = expand_shortened_url(track_link)
        if expanded_url:
            track_link = expanded_url

    # Extract artist names from the expanded link
    track_id = extract_track_id(track_link)
    if track_id:
        artist_names = get_artist_names(track_id, access_token)
        return artist_names
    else:
        return None

# Define a dictionary to store artist names and their frequencies
artist_frequency_map = {}

# Process the links with tqdm progress bar
for link in tqdm(all_links[:11000], desc="Processing links"):
    artist_names = extract_artist_names_from_link(link)
    if artist_names:
        # Update the artist frequency map
        for artist in artist_names:
            if artist in artist_frequency_map:
                artist_frequency_map[artist] += 1
            else:
                artist_frequency_map[artist] = 1

# Write the artist frequency map to a text file
with open('artist_frequency.txt', 'w') as file:
    for artist, frequency in artist_frequency_map.items():
        file.write(f"{artist}: {frequency}\n")